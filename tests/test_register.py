"""Tests for register.py."""
import json
from unittest.mock import MagicMock

from pyremoteplay import register

KEY_0 = bytes([
    0xce, 0xbc, 0xb6, 0x40, 0x08, 0x07, 0x76, 0x04,
    0x7b, 0x85, 0xe8, 0x5b, 0xf3, 0x50, 0xf5, 0x2d,
])

KEY_1 = bytes([
    0x88, 0x15, 0x29, 0x24, 0xbe, 0xde, 0x71, 0x76,
    0xd7, 0x57, 0xdb, 0xae, 0xa0, 0x02, 0x80, 0x90,
])

NONCE = bytes(16)

REGIST_PAYLOAD = bytes([
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xd7,
    0x57, 0xdb, 0xae, 0xa0, 0x02, 0x80, 0x90, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x88, 0x15, 0x29, 0x24, 0xbe, 0xde, 0x71,
    0x76, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
])

ENC_PAYLOAD = bytes([
    0x51, 0xcd, 0xfb, 0x33, 0x7d, 0xf8, 0x8b, 0x1a,
    0x62, 0xcc, 0x0c, 0x6f, 0xec, 0xa0, 0xcb, 0x88,
    0xbb, 0x07, 0xdb, 0xf3, 0x56, 0x9a, 0x2c, 0xd4,
    0x7a, 0x99, 0x91, 0x54, 0x6c, 0xd3, 0xa2, 0x8a,
    0xa9, 0x27, 0xb0, 0x21, 0xc0, 0x41, 0x05, 0x40,
    0xe1, 0xa6, 0x97, 0x40, 0x67, 0x6c, 0xd6, 0x2b,
    0x33, 0x6b, 0xaa, 0xb7, 0xfe, 0xa7, 0x0f, 0x85,
    0xfa, 0xb7, 0xcf, 0x31, 0x0c, 0x46, 0x12, 0xdf,
    0x74, 0x11, 0x54, 0xfc, 0xb0, 0x53, 0xc6, 0x43,
    0x38, 0x6a, 0xf8, 0x35, 0x99, 0xc4, 0xe5, 0x7f,
    0x33, 0xa6, 0x64, 0x26, 0x9d, 0x6a, 0xc5, 0xb4,
    0xbf, 0xef, 0x07, 0x4a, 0x82, 0x01, 0x8c, 0xfd,
    0x7c, 0xc1, 0xcc, 0x86, 0x00, 0xdf, 0x2d, 0x22,
    0x25, 0x8c, 0xe5,
])

HEADERS = bytes([
    0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x73, 0x69,
    0x65, 0x2f, 0x70, 0x73, 0x34, 0x2f, 0x72, 0x70,
    0x2f, 0x73, 0x65, 0x73, 0x73, 0x2f, 0x72, 0x67,
    0x73, 0x74, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f,
    0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x20, 0x48, 0x54,
    0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a,
    0x48, 0x4f, 0x53, 0x54, 0x3a, 0x20, 0x31, 0x30,
    0x2e, 0x30, 0x2e, 0x32, 0x2e, 0x31, 0x35, 0x0d,
    0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67,
    0x65, 0x6e, 0x74, 0x3a, 0x20, 0x72, 0x65, 0x6d,
    0x6f, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x20,
    0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x0d,
    0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f,
    0x73, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
    0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67,
    0x74, 0x68, 0x3a, 0x20, 0x35, 0x38, 0x37, 0x0d,
    0x0a, 0x52, 0x50, 0x2d, 0x56, 0x65, 0x72, 0x73,
    0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x31, 0x30, 0x2e,
    0x30, 0x0d, 0x0a, 0x0d, 0x0a,
])

INFO = bytes([
    0x7b, 0x22, 0x41, 0x50, 0x2d, 0x53, 0x73, 0x69,
    0x64, 0x22, 0x3a, 0x20, 0x22, 0x33, 0x30, 0x33,
    0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33,
    0x30, 0x33, 0x30, 0x33, 0x30, 0x22, 0x2c, 0x20,
    0x22, 0x41, 0x50, 0x2d, 0x42, 0x73, 0x73, 0x69,
    0x64, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x22, 0x2c, 0x20, 0x22, 0x41, 0x50, 0x2d,
    0x4b, 0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x33,
    0x39, 0x33, 0x39, 0x33, 0x39, 0x33, 0x39, 0x33,
    0x39, 0x33, 0x39, 0x33, 0x39, 0x33, 0x39, 0x22,
    0x2c, 0x20, 0x22, 0x41, 0x50, 0x2d, 0x4e, 0x61,
    0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x4c,
    0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
    0x4e, 0x28, 0x52, 0x29, 0x34, 0x22, 0x2c, 0x20,
    0x22, 0x50, 0x53, 0x34, 0x2d, 0x4d, 0x61, 0x63,
    0x22, 0x3a, 0x20, 0x22, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x22, 0x2c, 0x20, 0x22, 0x50, 0x53, 0x34, 0x2d,
    0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x4b, 0x65,
    0x79, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x20,
    0x22, 0x50, 0x53, 0x34, 0x2d, 0x4e, 0x69, 0x63,
    0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20,
    0x22, 0x50, 0x53, 0x34, 0x2d, 0x33, 0x30, 0x36,
    0x22, 0x2c, 0x20, 0x22, 0x52, 0x50, 0x2d, 0x4b,
    0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
    0x20, 0x22, 0x32, 0x22, 0x2c, 0x20, 0x22, 0x52,
    0x50, 0x2d, 0x4b, 0x65, 0x79, 0x22, 0x3a, 0x20,
    0x22, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x22, 0x7d,
])

RESPONSE = bytes([
    0x41, 0x50, 0x2d, 0x53, 0x73, 0x69, 0x64, 0x3a,
    0x20, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33,
    0x30, 0x33, 0x30, 0x33, 0x30, 0x33, 0x30, 0x33,
    0x30, 0x0d, 0x0a, 0x41, 0x50, 0x2d, 0x42, 0x73,
    0x73, 0x69, 0x64, 0x3a, 0x20, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0d, 0x0a, 0x41, 0x50, 0x2d, 0x4b, 0x65,
    0x79, 0x3a, 0x20, 0x33, 0x39, 0x33, 0x39, 0x33,
    0x39, 0x33, 0x39, 0x33, 0x39, 0x33, 0x39, 0x33,
    0x39, 0x33, 0x39, 0x0d, 0x0a, 0x41, 0x50, 0x2d,
    0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x50, 0x4c,
    0x41, 0x59, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
    0x4e, 0x28, 0x52, 0x29, 0x34, 0x0d, 0x0a, 0x50,
    0x53, 0x34, 0x2d, 0x4d, 0x61, 0x63, 0x3a, 0x20,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x50, 0x53,
    0x34, 0x2d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
    0x4b, 0x65, 0x79, 0x3a, 0x20, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x50,
    0x53, 0x34, 0x2d, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
    0x61, 0x6d, 0x65, 0x3a, 0x20, 0x50, 0x53, 0x34,
    0x2d, 0x33, 0x30, 0x36, 0x0d, 0x0a, 0x52, 0x50,
    0x2d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
    0x3a, 0x20, 0x32, 0x0d, 0x0a, 0x52, 0x50, 0x2d,
    0x4b, 0x65, 0x79, 0x3a, 0x20, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a,
])

RESPONSE_HEADER = bytes([
    0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
    0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d,
    0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f,
    0x73, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
    0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67,
    0x74, 0x68, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x32, 0x33, 0x39, 0x0d, 0x0a,
    0x0d, 0x0a,
])


RAW_RESPONSE = b''.join([
    RESPONSE_HEADER,
    RESPONSE,
])


def test_key_0():
    """Test Key 0."""
    mock_pin = 12345678
    assert register.gen_key_0(mock_pin) == KEY_0


def test_key_1():
    """Test Key 1."""
    assert register.gen_key_1(NONCE)


def test_regist_payload():
    """Test Regist Payload."""
    assert register.get_regist_payload(KEY_1) == REGIST_PAYLOAD


def test_encrypt_payload():
    """Test Encrypt payload."""
    mock_id = "x3HEK6t1aw8="
    cipher = register.SessionCipher(KEY_0, NONCE, counter=0)
    mock_payload = register.encrypt_payload(cipher, mock_id)
    assert mock_payload == ENC_PAYLOAD


def test_get_regist_headers():
    """Test Regist Headers."""
    length = len(REGIST_PAYLOAD) + len(ENC_PAYLOAD)
    assert register.get_regist_headers(length) == HEADERS


def test_parse_response():
    """Test Parse Response."""
    cipher = MagicMock()
    cipher.decrypt = MagicMock(return_value=RESPONSE)
    assert register.parse_response(cipher, RAW_RESPONSE) == json.loads(INFO)
