# fmt: off
"""Tests for crypt.py."""
from pyremoteplay import crypt

HANDSHAKE_KEY = bytes([
    0xfc, 0x5d, 0x4b, 0xa0, 0x3a, 0x35, 0x3a, 0xbb,
    0x6a, 0x7f, 0xac, 0x79, 0x1b, 0x17, 0xbb, 0x34,
])
SECRET = bytes([
    0xb8, 0x1c, 0x61, 0x46, 0xe7, 0x49, 0x73, 0x8c,
    0x96, 0x30, 0xca, 0x13, 0xff, 0x71, 0xe5, 0x9b,
    0x3b, 0xf9, 0x41, 0x98, 0xd4, 0x67, 0xa5, 0xa2,
    0xbc, 0x78, 0x4, 0x92, 0x81, 0x43, 0xec, 0x1d,
])
PRIVATE_KEY = bytes([
    0x16, 0xe7, 0x5d, 0xcb, 0xda, 0x98, 0x55, 0xfb,
    0x6b, 0xef, 0xdd, 0x8a, 0xa5, 0xf1, 0x6e, 0x7f,
    0x46, 0xfd, 0xe1, 0xd2, 0x27, 0x97, 0x3, 0x60,
    0x18, 0x72, 0xd8, 0x4b, 0x15, 0x38, 0xd9, 0x0,
])
PUBLIC_KEY = bytes([
    0x4, 0xf4, 0xa, 0xf1, 0x35, 0xa4, 0x88, 0x94,
    0x36, 0xce, 0xe5, 0x2b, 0x5c, 0x73, 0xa3, 0x3e,
    0xc5, 0xad, 0xb, 0xe0, 0x95, 0x2f, 0x57, 0xf4,
    0xf0, 0xed, 0xc, 0x80, 0xb0, 0xbe, 0xda, 0x7c,
    0xa6, 0x43, 0x78, 0x93, 0x93, 0xa5, 0x94, 0x7e,
    0x9f, 0xaa, 0x3f, 0x67, 0x95, 0xc9, 0xaa, 0x9,
    0xa9, 0x63, 0x25, 0xdf, 0xe8, 0x50, 0xbf, 0xc3,
    0xf1, 0xdb, 0x62, 0xa5, 0xa, 0xbf, 0xb0, 0xff,
    0xf7,
])

PUBLIC_SIG = bytes([
    0x99, 0xb5, 0xcb, 0xb5, 0x37, 0x18, 0xb, 0xfc,
    0x55, 0xda, 0x43, 0x7f, 0x44, 0x76, 0xa8, 0x17,
    0xc9, 0x37, 0xfe, 0x56, 0x1b, 0x8a, 0xbe, 0xc,
    0x41, 0x12, 0xab, 0x71, 0xf5, 0xa6, 0x8d, 0x29,
])

REMOTE_KEY = bytes([
    0x4, 0xdf, 0xef, 0x8, 0xbb, 0xa8, 0x56, 0xf2,
    0xb4, 0x4b, 0x8a, 0xe, 0x4f, 0x44, 0x20, 0x3f,
    0x8e, 0x49, 0x3f, 0xee, 0xd4, 0x3c, 0xe9, 0x3a,
    0xfe, 0x5c, 0x64, 0x67, 0x77, 0x20, 0x15, 0x7c,
    0x59, 0x10, 0x15, 0x67, 0x94, 0xae, 0x5f, 0x2,
    0x4a, 0xad, 0xc, 0xce, 0xfa, 0x14, 0x15, 0xa,
    0xab, 0xee, 0x8, 0xb, 0x14, 0x12, 0x76, 0xea,
    0x3e, 0xc0, 0xd5, 0x65, 0xf4, 0x68, 0x77, 0xa3,
    0xca,
])

REMOTE_SIG = bytes([
    0x13, 0xc5, 0x89, 0xe2, 0x3b, 0x72, 0x85, 0x24,
    0xa9, 0x9f, 0x96, 0x80, 0x3, 0xa1, 0x81, 0x30,
    0x59, 0x68, 0xf1, 0xbb, 0xb6, 0x4d, 0xc4, 0xa7,
    0x6c, 0xce, 0xf6, 0x79, 0x4c, 0xeb, 0x2d, 0x98
])

def test_ecdh():
    """Test ECDH."""

    ecdh = crypt.StreamECDH(HANDSHAKE_KEY, PRIVATE_KEY)
    assert ecdh.public_key == PUBLIC_KEY
    assert ecdh.public_sig == PUBLIC_SIG
    success = ecdh.set_secret(REMOTE_KEY, REMOTE_SIG)
    assert ecdh._secret == SECRET
    assert success


def test_get_gmac_key():
    """Test Generating GMAC Key."""
    base_key = bytes([
        0xbe, 0xeb, 0xa0, 0xf0, 0x3d, 0x05, 0x70, 0x7d,
        0x3a, 0xc7, 0x3c, 0xd7, 0x32, 0xb9, 0x48, 0x01,
    ])
    base_iv = bytes([
        0xe8, 0x71, 0x87, 0xe7, 0x63, 0xe0, 0xdf, 0x46,
        0x3d, 0xc2, 0x02, 0x4a, 0x2c, 0xd2, 0x9c, 0x45,
    ])

    test_key = bytes([
        0xe3, 0xdb, 0x92, 0xd9, 0xdd, 0xd3, 0x68, 0x99,
        0xae, 0xfd, 0x9b, 0x15, 0xe1, 0xa6, 0x87, 0x8b,
    ])

    mock_key = crypt.get_gmac_key(1, base_key, base_iv)
    assert mock_key == test_key


def test_gmac():
    """Test GMAC get and verify."""
    l_data1 = bytes([
        0x00, 0x10, 0xb4, 0xb3, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x10, 0x10, 0xb4, 0xb3, 0x08, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ])

    l_data2 = bytes([
        0x00, 0x10, 0xb4, 0xb3, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x0f, 0x11, 0x72, 0xf4, 0xb3, 0x00, 0x09, 0x00,
        0x00, 0x00, 0x08, 0x0e,
    ])

    l_data3 = bytes([
        0x00, 0x10, 0xb4, 0xb3, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x10, 0x10, 0xb4, 0xb3, 0x09, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ])

    r_data1 = bytes([
        0x00, 0x11, 0x72, 0xf4, 0xb2, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x72, 0x10, 0xb4, 0xb3, 0x09, 0x00, 0x09, 0x00,
        0x00, 0x00, 0x08, 0x0d, 0x7a, 0x61, 0x0a, 0x30,
        0x08, 0x80, 0x0a, 0x10, 0xd0, 0x05, 0x1a, 0x28,
        0x00, 0x00, 0x00, 0x01, 0x67, 0x4d, 0x40, 0x28,
        0x91, 0x8a, 0x01, 0x40, 0x16, 0xec, 0x05, 0xa8,
        0x08, 0x08, 0x0a, 0x00, 0x00, 0x0f, 0xa4, 0x00,
        0x07, 0x53, 0x01, 0x13, 0x43, 0xc7, 0xc5, 0x40,
        0x00, 0x00, 0x00, 0x01, 0x68, 0xee, 0x3c, 0x80,
        0x12, 0x0e, 0x02, 0x10, 0x00, 0x00, 0xbb, 0x80,
        0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x01,
        0x18, 0x64, 0x20, 0x64, 0x28, 0x64, 0x30, 0xc8,
        0x01, 0x3a, 0x14, 0x08, 0x00, 0x12, 0x0e, 0x02,
        0x10, 0x00, 0x00, 0xbb, 0x80, 0x00, 0x00, 0x01,
        0xe0, 0x00, 0x00, 0x00, 0x01, 0x18, 0x00,
    ])

    r_data2 = bytes([
        0x00, 0x11, 0x72, 0xf4, 0xb2, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x10, 0x11, 0x72, 0xf4, 0xb3, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ])

    r_data3 = bytes([
        0x00, 0x11, 0x72, 0xf4, 0xb2, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x14, 0x10, 0xb4, 0xb3, 0x0a, 0x00, 0x00, 0x00,
        0x00, 0x09, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00,
        0x00,
    ])
    l_tag1 = b'\x7b\x06\xb2\x0a'
    l_tag2 = b'\x05\xb7\xaf\x62'
    l_tag3 = b'\x8d\x79\xa4\xee'
    r_tag1 = b'\x04\x40\x5e\xf4'
    r_tag2 = b'\xb9\x5f\x9f\x2c'
    r_tag3 = b'\xed\xba\xf7\x61'

    local = crypt.LocalCipher(HANDSHAKE_KEY, SECRET)
    remote = crypt.RemoteCipher(HANDSHAKE_KEY, SECRET)
    assert local.get_gmac(l_data1) == l_tag1
    local.advance_key_pos(len(l_data1))
    assert local.get_gmac(l_data2) == l_tag2
    local.advance_key_pos(2)
    assert local.get_gmac(l_data3) == l_tag3

    assert remote.get_gmac(r_data1, 0) == r_tag1
    assert remote.get_gmac(r_data2, 16) == r_tag2
    assert remote.get_gmac(r_data3, 32) == r_tag3


def test_encrypt_decrypt():
    """Test Encrypt and Decrypt."""
    key = bytes([
        0x01, 0x6e, 0x1b, 0xab, 0xd0, 0x3c, 0x00, 0x06,
        0x0d, 0x7e, 0xa9, 0x8e, 0x97, 0xdd, 0xe3, 0x69,
    ])
    iv = bytes([
        0xbc, 0xb7, 0x03, 0x7b, 0x7b, 0x3d, 0xe0, 0x3d,
        0x62, 0x29, 0x47, 0x56, 0x14, 0xae, 0x85, 0x4c,
    ])
    data = bytes([
        0x4e, 0x61, 0x9f, 0x94, 0x5d, 0x4b, 0x8e, 0xbd,
        0x2a, 0x15, 0x4d, 0x03, 0x6a, 0xcd, 0x49, 0x56,
        0x9c, 0xc7, 0x5c, 0xe3, 0xe7, 0x00, 0x17, 0x9a,
        0x38, 0xd9, 0x69, 0x53, 0x45, 0xf9, 0x0c, 0xb5,
        0x8c, 0x05, 0x65, 0x0f, 0x70,
    ])
    enc_data = bytes([
        0x36, 0x8d, 0xd4, 0x21, 0x4b, 0xbe, 0x40, 0xcc,
        0xea, 0x92, 0xfe, 0x77, 0xe4, 0x67, 0x2c, 0x31,
        0x58, 0x89, 0x56, 0x6f, 0x6c, 0xb4, 0x5f, 0x18,
        0x31, 0xa7, 0xa5, 0x2e, 0x38, 0xba, 0x37, 0x25,
        0x67, 0x5c, 0x13, 0x53, 0xb0,
    ])

    key_pos = 1
    stream = crypt.StreamCipher(HANDSHAKE_KEY, SECRET)
    local = stream._local_cipher
    remote = stream._remote_cipher
    local._base_index = remote._base_index = 42
    local.keystreams = []
    local.keystream_index = 0
    remote.keystreams = []
    remote.keystream_index = 0
    local._init_cipher()
    remote._init_cipher()
    assert local.base_key == key
    assert remote.base_key == key
    assert local.base_iv == iv
    assert remote.base_iv == iv
    stream.advance_key_pos(key_pos)
    mock_enc = stream.encrypt(data)
    mock_data = stream.decrypt(enc_data, key_pos)
    assert mock_enc == enc_data
    assert mock_data == data


def test_encrypt():
    """Test Encryption with local cipher."""
    key_pos = 0xa3
    payload = bytes([
        0xa0, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff,
        0x7f, 0x99, 0x99, 0xff, 0x7f, 0xfe, 0xf7, 0xef,
        0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00,
    ])
    payload_enc = bytes([
        0x85, 0x20, 0x60, 0xf2, 0x26, 0xbe, 0x5a, 0x09,
        0x79, 0x93, 0x66, 0xb5, 0x4b, 0x47, 0xc1, 0xa4,
        0x44, 0xd0, 0x07, 0x69, 0xf0, 0x16, 0x4f, 0xf8,
        0x29,
    ])

    local_cipher = crypt.LocalCipher(HANDSHAKE_KEY, SECRET)
    local_cipher.advance_key_pos(key_pos)
    mock_enc = local_cipher.encrypt(payload)
    assert mock_enc == payload_enc

# fmt: on
