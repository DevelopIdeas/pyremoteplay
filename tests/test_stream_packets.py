"""Tests for pyremoteplay/stream_packets.py."""
from pyremoteplay.stream_packets import Chunk, Header, Packet


def test_init():
    """Test build init packet."""
    INIT = bytes([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00,
        0x01,
    ])
    TAG_TSN = 1
    msg = Packet(Header.Type.CONTROL, Chunk.Type.INIT, tag=TAG_TSN, tsn=TAG_TSN)
    mock_result = msg.bytes()
    assert mock_result == INIT


def test_parse_init_ack():
    """Test parsing init ack packet."""
    INIT_ACK = bytes([
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
        0x34, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x64, 0x00, 0x64, 0x15, 0xcf, 0x15,
        0x4f, 0xea, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x01, 0x90,
        0x00, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xa3, 0x12,
        0x05,
    ])

    DATA = bytes([
        0xea, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x15, 0xcf, 0x15, 0x4f, 0x00, 0x01, 0x90, 0x00,
        0x15, 0xcf, 0x15, 0x4f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x26, 0xa3, 0x12, 0x05,
    ])

    TAG_TSN = 365892943
    A_RWND = 102400
    STREAMS = 100

    mock_packet = Packet.parse(INIT_ACK)
    assert mock_packet.type == Header.Type.CONTROL
    assert mock_packet.chunk.type == Chunk.Type.INIT_ACK
    params = mock_packet.params
    assert params["tag"] == TAG_TSN
    assert params["a_rwnd"] == A_RWND
    assert params["outbound_streams"] == STREAMS
    assert params["inbound_streams"] == STREAMS
    assert params["tsn"] == TAG_TSN
    assert params["data"] == bytearray(DATA)


def test_cookie():
    """Test build cookie packet."""
    COOKIE = bytes([
        0x00, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
        0x24, 0xea, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x01, 0x90,
        0x00, 0x15, 0xcf, 0x15, 0x4f, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xa3, 0x12,
        0x05,
    ])
    DATA = bytes([
        0xea, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x15, 0xcf, 0x15, 0x4f, 0x00, 0x01, 0x90, 0x00,
        0x15, 0xcf, 0x15, 0x4f, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x26, 0xa3, 0x12, 0x05,
    ])
    TAG = 1
    TAG_REMOTE = 365892943

    msg = Packet(Header.Type.CONTROL, Chunk.Type.COOKIE, tag=TAG, tag_remote=TAG_REMOTE, data=DATA)
    mock_result = msg.bytes()
    assert mock_result == COOKIE


def test_parse_cookie_ack():
    """Test parsing cookie ack packet."""
    COOKIE_ACK = bytes([
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00,
        0x04,
    ])
    mock_packet = Packet.parse(COOKIE_ACK)
    assert mock_packet.type == Header.Type.CONTROL
    assert mock_packet.chunk.type == Chunk.Type.COOKIE_ACK


def test_data_ack():
    """Test build data ack packet."""
    DATA_ACK = bytes([
        0x00, 0x15, 0xcf, 0x15, 0x4f, 0xa0, 0x13, 0xad,
        0xbd, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x10, 0x15, 0xcf, 0x15, 0x50, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ])
    TAG_REMOTE = 365892943
    TAG = 1
    GMAC = 2685644221
    KEY_POS = 0
    TSN = 365892944

    msg = Packet(Header.Type.CONTROL, Chunk.Type.DATA_ACK, tag_remote=TAG_REMOTE, tag=TAG, tsn=TSN)
    msg.header.gmac = GMAC
    msg.header.key_pos = KEY_POS
    mock_result = msg.bytes()
    assert mock_result == DATA_ACK


def test_parse_data_ack():
    """Test parsing data ack packet."""
    DATA_ACK = bytes([
        0x00, 0x15, 0xcf, 0x15, 0x4f, 0xa0, 0x13, 0xad,
        0xbd, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x10, 0x15, 0xcf, 0x15, 0x50, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ])
    TAG_REMOTE = 365892943
    GMAC = 2685644221
    KEY_POS = 0
    TSN = 365892944
    A_RWND = 102400

    mock_packet = Packet.parse(DATA_ACK)
    assert mock_packet.type == Header.Type.CONTROL
    assert mock_packet.chunk.type == Chunk.Type.DATA_ACK
    params = mock_packet.params
    assert params["tag_remote"] == TAG_REMOTE
    assert params["gmac"] == GMAC
    assert params["key_pos"] == KEY_POS
    assert params["tsn"] == TSN
    assert params["a_rwnd"] == A_RWND
    assert params["gap_ack_blocks_count"] == 0
    assert params["dup_tsns_count"] == 0
